# add number line to side of screen
#
# # format crystal code on save for now, as crystal LSP is not work
add-highlighter global/ number-lines -hlcursor
add-highlighter global/ show-matching

# convenient mappings (easy commands, comments, etc.)
map global normal ";" ":"
map global normal ":" ";"
map global normal / /(?i)
map global normal <a-/> <a-/>(?i)
map global normal "#" ": comment-line<ret>"

# change indentation in insert mode with tab
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'

# set tab widths per language
hook global WinSetOption filetype=(java|rust|python) %{ set-option buffer indentwidth 4 }
hook global WinSetOption filetype=(yaml|elm|crystal|javascript|typescript|purescript|css|html|markdown) %{
    set-option buffer indentwidth 2
}

# wrap text in txt and markdown files
hook global WinSetOption filetype=(markdown|text) %{
    add-highlighter buffer/ wrap
    add-highlighter buffer/ show-whitespaces
}

# install plug.kak if it isn't installed yet
nop %sh{
    if [ ! -d "$HOME/.config/kak/plugins/plug.kak" ]; then
        mkdir -p "$HOME/.config/kak/plugins"
        git clone https://github.com/robertmeta/plug.kak.git "$HOME/.config/kak/plugins/plug.kak"
    fi
}

# import plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# import plugins
plug "robertmeta/plug.kak" noload
plug "delapouite/kakoune-palette"
plug "occivink/kakoune-sudo-write"
plug "alexherbo2/auto-pairs.kak"
plug "alexherbo2/explore.kak" 
plug "TeddyDD/kakoune-mint"
plug "alexherbo2/prelude.kak"
plug "alexherbo2/auto-pairs.kak"
plug "andreyorst/fzf.kak" config %{
    map global normal <c-p> ": fzf-mode<ret>"
    set-option global fzf_highlight_command bat
}
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}
plug "alexherbo2/move-line.kak" config %{
    map global normal <c-down> ': move-line-below<ret>'
    map global normal <c-up> ': move-line-above<ret>'
}
plug "alexherbo2/surround.kak" config %{
    # Quoting
    declare-user-mode surround
    map global surround s ':surround<ret>' -docstring 'surround'
    map global surround c ':change-surround<ret>' -docstring 'change'
    map global surround d ':delete-surround<ret>' -docstring 'delete'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'

    map global normal q ': enter-user-mode surround<ret>'
    map global normal Q ': surround-enter-insert-mode<ret>'
    # Move macros to ^
    map global normal ^ q
    map global normal <a-^> Q
}
plug "jdugan6240/powerline.kak" defer powerline %{
    set-option global powerline_format 'bufname filetype lsp mode_info line_column position'

    source "%val{config}/gruvbox-light-powerline.kak"

    # Set colorscheme based on the time of day
    evaluate-commands %sh{
        if [ "$THEME" = "light" ]; then
            echo "colorscheme gruvbox-light"
            echo "powerline-theme gruvbox-light"
        else
            echo "colorscheme gruvbox"
            echo "powerline-theme gruvbox"
        fi
    }
} config %{
    powerline-start
}

# setup lsp plugin
plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'
    set global lsp_hover_max_lines 15

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    hook global WinSetOption filetype=(c|cpp|rust|elm|typescript|javascript) %{
        # enable LSP with hover
        lsp-enable-window
        lsp-auto-hover-enable
        lsp-auto-hover-insert-mode-disable
        # set-option window lsp_hover_anchor true

        # add keybindings
        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
        map window user "r" ": lsp-rename-prompt<ret>" -docstring "rename item with LSP"

        # set how errors and warnings look
        set-face window DiagnosticError default,red+b
        set-face window DiagnosticWarning default+du

        # auto format on save
        hook window BufWritePre .* lsp-formatting-sync
    }

    hook global WinSetOption filetype=rust %{
        set-option window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global KakEnd .* lsp-exit
}

# format crystal code on save for now, as crystal LSP is not working
hook global WinSetOption filetype=crystal %{
    hook window BufWritePre .* %{
        nop %sh{
            crystal tool format %val{buffile}
        }
    }
}

# hook global WinSetOption filetype=rust %{
#   hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
#   hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
#   hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
#   hook -once -always window WinSetOption filetype=.* %{
#     remove-hooks window rust-inlay-hints
#   }
# }
